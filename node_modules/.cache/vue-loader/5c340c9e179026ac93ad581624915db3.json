{"remainingRequest":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/src/views/Login.vue?vue&type=style&index=0&id=26084dc2&lang=scss&scoped=true&","dependencies":[{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/src/views/Login.vue","mtime":1637090558778},{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/css-loader/dist/cjs.js","mtime":1632390579978},{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1632390580238},{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/postcss-loader/src/index.js","mtime":1632390580199},{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/sass-loader/dist/cjs.js","mtime":1621970928203},{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/cache-loader/dist/cjs.js","mtime":1632390574608},{"path":"/Users/moussia/Desktop/esgi/2em année/projetVMAnew/projet-VMA/node_modules/vue-loader/lib/index.js","mtime":1632390580238}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudG90byB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Cg=="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <form\n      novalidate\n      class=\"toto md-layout-item md-size-50\"\n      @submit.prevent=\"validateUser\"\n    >\n      <md-card>\n        <md-card-header>\n          <div class=\"md-title\">Login</div>\n        </md-card-header>\n\n        <md-card-content>\n          <md-field :class=\"getValidationClass('email')\">\n            <label for=\"email\">Email</label>\n            <md-input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              autocomplete=\"email\"\n              v-model=\"form.email\"\n              :disabled=\"sending\"\n            />\n            <span class=\"md-error\" v-if=\"!$v.form.email.required\"\n              >The email is required</span\n            >\n            <span class=\"md-error\" v-else-if=\"!$v.form.email.email\"\n              >Invalid email</span\n            >\n          </md-field>\n        </md-card-content>\n\n        <md-card-content>\n          <md-field :class=\"getValidationClass('password')\">\n            <label for=\"password\">Password</label>\n            <md-input\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              v-model=\"form.password\"\n            />\n            <span class=\"md-error\" v-if=\"!$v.form.password.required\"\n              >The password is required</span\n            >\n          </md-field>\n        </md-card-content>\n\n        <md-card-actions>\n          <md-button\n            type=\"submit\"\n            class=\"md-raised md-primary\"\n            :disabled=\"sending\"\n            >Login</md-button\n          >\n        </md-card-actions>\n\n        <router-link to=\"/forgetPassword\">Forget Password</router-link> |\n        <router-link to=\"/register\">Register</router-link>\n      </md-card>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { validationMixin } from 'vuelidate';\nimport { required, email } from 'vuelidate/lib/validators';\n\nexport default {\n  name: 'Login',\n  mixins: [validationMixin],\n  data: () => ({\n    form: {\n      email: null,\n      password: null,\n    },\n    userSaved: false,\n    sending: false,\n    lastUser: null,\n  }),\n  validations: {\n    form: {\n      email: {\n        required,\n        email,\n      },\n      password: {\n        required,\n      },\n    },\n  },\n  methods: {\n    getValidationClass(fieldName) {\n      const field = this.$v.form[fieldName];\n      if (field) {\n        return {\n          'md-invalid': field.$invalid && field.$dirty,\n        };\n      }\n    },\n    clearForm() {\n      this.$v.$reset();\n      this.form.email = null;\n      this.form.password = null;\n    },\n    saveUser() {\n      this.sending = true;\n    },\n    validateUser() {\n      this.$v.$touch();\n\n      if (!this.$v.$invalid) {\n        this.saveUser();\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.toto {\n  display: inline-block;\n}\n</style>\n"]}]}